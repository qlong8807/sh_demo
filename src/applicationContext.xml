<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="  
    http://www.springframework.org/schema/beans   
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
    http://www.springframework.org/schema/tx  
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd  
    http://www.springframework.org/schema/aop   
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd  
    http://www.springframework.org/schema/context  
    http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<mvc:annotation-driven />
	<context:component-scan base-package="cn.demo.*.**"></context:component-scan>
	
<!-- 对静态资源文件的访问  方案一 （二选一） -->    
<!-- <mvc:default-servlet-handler/>     -->
<!-- 对静态资源文件的访问  方案二 （二选一）-->    
<!-- <mvc:resources mapping="/images/**" location="/images/" cache-period="31556926"/>     -->
<!-- <mvc:resources mapping="/js/**" location="/js/" cache-period="31556926"/>     -->
<!-- <mvc:resources mapping="/css/**" location="/css/" cache-period="31556926"/> -->


	<!--告诉spring去哪里获取占位符的配置文件 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:db.properties</value>
			</list>
		</property>
	</bean>
	<!--配置数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass">
			<value>${db.driver}</value>
		</property>
		<property name="jdbcUrl">
			<value>${db.url}</value>
		</property>
		<property name="user">
			<value>${db.user}</value>
		</property>
		<property name="password">
			<value>${db.password}</value>
		</property>
	</bean>

	<!--数据源提供给spring的sessionFactory，这里我们要求是使用注解方式，所以spring要选择AnnotationSessionFactoryBean来获取sessionFactory 
		当然你如果要用xml的，使用LoaclSessionFactoryBean来配置，当然这里的AnnotationSessionFactoryBean是继承LoaclSessionFactoryBean -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!--让spring帮你扫描这个包底下的所有类，主要作用扫描跟数据库对应的实体类 -->
		<property name="packagesToScan" value="spring.model" />
		<!--设置hibernate的属性 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<!--设置显示Hibernate操作的SQL语句--> 
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<!-- 连接释放模式 -->
				<prop key="hibernate.connection.release_mode">after_transaction</prop>
			</props>
		</property>
	</bean>

	<!--事务配置 -->
	<bean id="txManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<aop:config>
		<aop:advisor pointcut="execution(* spring.service.*Service.*(..))"
			advice-ref="txAdvice" />
	</aop:config>

	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="load*" read-only="true" />
			<tx:method name="*" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>

	<!--配置拦截器 -->
<!-- 	<mvc:interceptors> -->
<!-- 		多个拦截器,顺序执行这里的path符号有/*, /**,*, ? 等，对于student.do?param=1从?开始不作为path 如果不配置或/*,将拦截所有的Controller -->
<!-- 		<mvc:interceptor> -->
<!-- 			<mvc:mapping path="/student/save*" /> -->
<!-- 			<bean class="spring.common.interceptor.FromDupInterceptor"></bean> -->
<!-- 		</mvc:interceptor> -->
<!-- 	</mvc:interceptors> -->
	
	<bean id="jspViewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/" />
		<property name="suffix" value=".jsp" />
	</bean>
	<!-- //这个也是spring默认的一个视图定位器 -->
	
	<!-- handlerMapping 根据前后顺序加载  方法一-->
    <!-- <bean id="simpleUrlHandlerMapping"  
          class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">  
        <property name="mappings">  
            <props>  
                <prop key="/login/*">loginController</prop>  
            </props>  
        </property>  
    </bean> -->
    <!-- handlerMapping 根据前后顺序加载  方法二 -->
   <!--  <bean id="beanNameUrlHandlerMapping"  
          class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping">  
    </bean> -->
  	
    <!-- MultiActionController的助理MethodNameResolver-->
	<!-- 方法一（默认）：InternalPathMethodNameResolver  请求路径：http://localhost:8080/sh_demo/login/hello.do -->
	<!-- 方法二：PropertiesMethodNameResolver 
		<bean id="propertiesMethodNameResolver"
		class="org.springframework.web.servlet.mvc.multiaction.PropertiesMethodNameResolver">
		<property name="mappings">  
            <value>
            	路径后缀名=方法名
            	/list.do=getLists
            	/add.do=addUser
            	/update.do=updateUser
            </value>
        </property>
        </bean>
	-->
    <!-- 方法三：ParameterMethodNameResolver
     <bean id="paraMethodResolver"  
        class="org.springframework.web.servlet.mvc.multiaction.ParameterMethodNameResolver">  
        <property name="paramName" value="methodName"/>  
        <property name="defaultMethodName" value="list"/>
    </bean> 
    	请求路径：http://localhost:8080/sh_demo/login.do?method=hello
    -->
    
	<!-- <bean name="loginController" class="cn.demo.user.controller.LoginController">  
	<property name="methodNameResolver" ref="paraMethodResolver" />
	</bean> -->
</beans>